import pandas as pd
# Load the CSV file
data = pd.read_csv(r"C:\Users\Dell\Downloads\city_temperature.csv\city_temperature.csv")
# Display the first few rows of the dataframe
print(data.head())


# Data Exploration
print("\nDataset Info:")
print(data.info())

print("\nSummary Statistics:")
print(data.describe())

# Check for missing values
missing_values = data.isnull().sum()
print("\nMissing values in each column:")
print(missing_values)

# Check for outliers using boxplot
plt.figure(figsize=(10, 6))
sns.boxplot(data['AvgTemperature'])  # Using 'AvgTemperature' as the column name
plt.title('Temperature Distribution with Outliers')
plt.show()

# Create a 'date' column from 'Year', 'Month', and 'Day'
data['date'] = pd.to_datetime(data[['Year', 'Month', 'Day']])

# Visualization
plt.figure(figsize=(14, 8))
plt.plot(data['date'], data['AvgTemperature'], marker='o', linestyle='-', color='b')  # Using 'AvgTemperature'
plt.xlabel('Date')
plt.ylabel('Temperature')
plt.title('Temperature Time Series')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

# Analysis and Interpretation

# Identify seasonal patterns using rolling mean
data.set_index('date', inplace=True)
data['rolling_mean'] = data['AvgTemperature'].rolling(window=365).mean()  # 365-day rolling mean for seasonal pattern

plt.figure(figsize=(14, 8))
plt.plot(data.index, data['AvgTemperature'], label='Temperature', color='blue', alpha=0.5)
plt.plot(data.index, data['rolling_mean'], label='365-Day Rolling Mean', color='red', linewidth=2)
plt.xlabel('Date')
plt.ylabel('Temperature')
plt.title('Temperature with 365-Day Rolling Mean')
plt.legend()
plt.grid(True)
plt.show()

# Analyze anomalies or significant fluctuations
threshold = data['AvgTemperature'].mean() + 3 * data['AvgTemperature'].std()  # Example threshold for significant fluctuation
anomalies = data[data['AvgTemperature'] > threshold]

print("\nSignificant Temperature Fluctuations:")
print(anomalies)

# Draw conclusions
print("\nConclusions:")
print("1. The dataset shows a general trend/pattern in temperature changes over time.")
print("2. The rolling mean plot helps in visualizing seasonal patterns.")
print("3. Significant fluctuations in temperature were observed on specific dates, which could be due to extreme weather events or data anomalies.")

# Save processed data to a new CSV file
data.to_csv('/mnt/data/processed_temperature_data.csv')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Data Preparation
data['Day'] = data['Day'].replace(0, 1)  # Replace 0 days with 1
data['Month'] = data['Month'].replace(0, 1)  # Replace 0 months with 1

def is_valid_date(row):
    try:
        pd.to_datetime(f"{row['Year']}-{row['Month']}-{row['Day']}")
        return True
    except ValueError:
        return False

data = data[data.apply(is_valid_date, axis=1)]
data['date'] = pd.to_datetime(data[['Year', 'Month', 'Day']])
data.set_index('date', inplace=True)

# Histogram of Temperatures
plt.figure(figsize=(10, 6))
sns.histplot(data['AvgTemperature'], bins=50, kde=True, color='skyblue')
plt.title('Histogram of Average Temperatures')
plt.xlabel('Temperature')
plt.ylabel('Frequency')
plt.show()

# Monthly Average Temperature
monthly_avg = data.groupby(data.index.month)['AvgTemperature'].mean()
plt.figure(figsize=(10, 6))
monthly_avg.plot(kind='line', marker='o', color='green')
plt.title('Average Monthly Temperature')
plt.xlabel('Month')
plt.ylabel('Average Temperature')
plt.grid(True)
plt.show()

# Yearly Average Temperature
yearly_avg = data.groupby(data.index.year)['AvgTemperature'].mean()
plt.figure(figsize=(10, 6))
yearly_avg.plot(kind='line', marker='o', color='blue')
plt.title('Average Yearly Temperature')
plt.xlabel('Year')
plt.ylabel('Average Temperature')
plt.grid(True)
plt.show()

# Monthly Temperature Distribution
plt.figure(figsize=(12, 8))
sns.boxplot(x=data.index.month, y=data['AvgTemperature'])
plt.title('Monthly Temperature Distribution')
plt.xlabel('Month')
plt.ylabel('Temperature')
plt.show()

# Pie Chart of Data Availability by Year
data_per_year = data['Year'].value_counts()
plt.figure(figsize=(10, 6))
data_per_year.plot(kind='pie', autopct='%1.1f%%', startangle=140, colormap='Pastel1')
plt.title('Data Availability by Year')
plt.ylabel('')
plt.show()

# Rolling Mean Visualization (Seasonal Pattern)
data['rolling_mean'] = data['AvgTemperature'].rolling(window=365).mean()
plt.figure(figsize=(14, 8))
plt.plot(data.index, data['AvgTemperature'], label='Temperature', color='blue', alpha=0.5)
plt.plot(data.index, data['rolling_mean'], label='365-Day Rolling Mean', color='red', linewidth=2)
plt.xlabel('Date')
plt.ylabel('Temperature')
plt.title('Temperature with 365-Day Rolling Mean')
plt.legend()
plt.grid(True)
plt.show()

# Analysis of Anomalies or Significant Fluctuations
threshold = data['AvgTemperature'].mean() + 3 * data['AvgTemperature'].std()
anomalies = data[data['AvgTemperature'] > threshold]
print("\nSignificant Temperature Fluctuations:")
print(anomalies)

# Save processed data to a new CSV file
data.to_csv('/mnt/data/processed_temperature_data.csv')


# Analysis of Anomalies or Significant Fluctuations
threshold = data['AvgTemperature'].mean() + 3 * data['AvgTemperature'].std()
anomalies = data[data['AvgTemperature'] > threshold]
print("\nSignificant Temperature Fluctuations:")
print(anomalies)


# Pie Chart of Data Availability by Year
data_per_year = data['Year'].value_counts()
plt.figure(figsize=(10, 6))
data_per_year.plot(kind='pie', autopct='%1.1f%%', startangle=140, colormap='Pastel1')
plt.title('Data Availability by Year')
plt.ylabel('')
plt.show()
# Histogram of Temperatures
plt.figure(figsize=(10, 6))
sns.histplot(data['AvgTemperature'], bins=50, kde=True, color='skyblue')
plt.title('Histogram of Average Temperatures')
plt.xlabel('Temperature')
plt.ylabel('Frequency')
plt.show()
